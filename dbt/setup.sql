USE ROLE ACCOUNTADMIN;

DROP DATABASE IF EXISTS DBT_CORTEX_LLMS;

-- Create role for dbt
CREATE OR REPLACE ROLE DBT_ROLE;

-- Assign role to ACCOUNTADMIN
GRANT ROLE DBT_ROLE TO ROLE ACCOUNTADMIN;

-- Create dbt user with secure password
-- CREATE OR REPLACE USER DBT_USER
--     PASSWORD = '<SECURE PASSWORD>'
--     LOGIN_NAME = 'DBT_USER'
--     DISPLAY_NAME = 'DBT User'
--     FIRST_NAME = 'DBT'
--     LAST_NAME = 'User'
--     EMAIL = 'dbt.user@example.com'
--     MUST_CHANGE_PASSWORD = TRUE;

-- Assign role to the user
GRANT ROLE DBT_ROLE TO USER DBT_USER;

-- Create warehouse for dbt
CREATE OR REPLACE WAREHOUSE CORTEX_WH 
WITH 
    WAREHOUSE_SIZE = 'XSMALL' 
    AUTO_SUSPEND = 60
    AUTO_RESUME = TRUE;

-- Create database
CREATE OR REPLACE DATABASE DBT_CORTEX_LLMS;

-- Use the database
USE DATABASE DBT_CORTEX_LLMS;

-- Create schemas
CREATE SCHEMA IF NOT EXISTS DEV;
CREATE SCHEMA IF NOT EXISTS STAGE;

-- Grant necessary privileges to the role
GRANT USAGE ON DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;
GRANT CREATE DATABASE ON ACCOUNT TO ROLE DBT_ROLE;
GRANT MODIFY ON DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;
GRANT MONITOR ON DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;
GRANT CREATE SCHEMA ON DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;

-- Grant schema privileges
GRANT ALL ON ALL SCHEMAS IN DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;
GRANT ALL ON FUTURE SCHEMAS IN DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;

-- Grant table privileges
GRANT ALL ON ALL TABLES IN DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;
GRANT ALL ON FUTURE TABLES IN DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;

-- Grant view privileges
GRANT ALL ON ALL VIEWS IN DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;
GRANT ALL ON FUTURE VIEWS IN DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;

-- Grant warehouse privileges
GRANT ALL ON WAREHOUSE CORTEX_WH TO ROLE DBT_ROLE;

-- Set the role for this session
USE ROLE DBT_ROLE;
USE WAREHOUSE CORTEX_WH;
USE SCHEMA STAGE;

-- Create file format for JSON data
CREATE OR REPLACE FILE FORMAT JSON_FORMAT
    TYPE = 'JSON'
    STRIP_OUTER_ARRAY = TRUE
    COMPRESSION = 'AUTO';

-- Create internal stage for seed files
CREATE OR REPLACE STAGE STAGE.RAW_DATA_STAGE;

-- Create raw tables
CREATE OR REPLACE TRANSIENT TABLE STAGE.CUSTOMER_INTERACTIONS (data VARIANT);
CREATE OR REPLACE TRANSIENT TABLE STAGE.PRODUCT_REVIEWS (data VARIANT);
CREATE OR REPLACE TRANSIENT TABLE STAGE.SUPPORT_TICKETS (data VARIANT);
CREATE OR REPLACE TRANSIENT TABLE STAGE.CUSTOMERS (data VARIANT);

-- Load data from internal stage
PUT file:///Users/axross/Snowflake/QuickStarts/dbt_cortex/dbt/seeds/customer_interactions.json @STAGE.RAW_DATA_STAGE;
PUT file:///Users/axross/Snowflake/QuickStarts/dbt_cortex/dbt/seeds/product_reviews.json @STAGE.RAW_DATA_STAGE;
PUT file:///Users/axross/Snowflake/QuickStarts/dbt_cortex/dbt/seeds/support_tickets.json @STAGE.RAW_DATA_STAGE;
PUT file:///Users/axross/Snowflake/QuickStarts/dbt_cortex/dbt/seeds/customers.json @STAGE.RAW_DATA_STAGE;
-- Copy data from stage to tables
COPY INTO STAGE.CUSTOMER_INTERACTIONS
FROM @STAGE.RAW_DATA_STAGE/customer_interactions.json
FILE_FORMAT = STAGE.JSON_FORMAT
ON_ERROR = 'CONTINUE';

COPY INTO STAGE.PRODUCT_REVIEWS
FROM @STAGE.RAW_DATA_STAGE/product_reviews.json
FILE_FORMAT = STAGE.JSON_FORMAT
ON_ERROR = 'CONTINUE';

COPY INTO STAGE.SUPPORT_TICKETS
FROM @STAGE.RAW_DATA_STAGE/support_tickets.json
FILE_FORMAT = STAGE.JSON_FORMAT
ON_ERROR = 'CONTINUE';

COPY INTO STAGE.CUSTOMERS
FROM @STAGE.RAW_DATA_STAGE/customers.json
FILE_FORMAT = STAGE.JSON_FORMAT
ON_ERROR = 'CONTINUE'; 
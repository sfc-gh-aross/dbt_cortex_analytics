---
description: 
globs: 
alwaysApply: false
---
### Cursor AI Prompt Â· Streamlit Development Workflow  
*(sav   e as `.mdc`)*

---
**Primary Goal**â€ƒSpinâ€‘up and iterate on a Streamlit dashboard inside a reproducible **Python 3.11** environment.

---
#### 1 Â· Environment Bootstrap
```bash
conda activate py311 && streamlit run ./src/app.py
```
> **Directory Convention**
> - **Application code** lives in **`./src/`**:
>   - Entrypoint: `app.py` (197 lines)
>   - Components: `components/*.py` (5 dashboard tabs)
>   - Utils: `utils/*.py` (6 utility modules)
>   - SQL: `sql/*/*.sql` (organized by dashboard)
>   - Assets: `assets/` (static files)
>   - Sample Code: `sample_code/` (reference implementations)
> - **Reference artefacts** live in **`./docs/`**:
>   - `SNOWFLAKE_TABLES.sql` â€“ canonical schema definitions
>   - `SNOWFLAKE_QUERIES.sql` â€“ vetted example queries
>   - `STREAMLIT_PRD.md` â€“ product requirements
>   - `STREAMLIT_PROMPT.md` â€“ best practices

---
#### 2 Â· Authoritative Data & Requirements Docs (`./docs/`)
Always validate against the most recent versions of:
- `./docs/SNOWFLAKE_TABLES.sql` â€“ MUST use only these tables
- `./docs/SNOWFLAKE_QUERIES.sql` â€“ reference queries
- `./docs/STREAMLIT_PRD.md` â€“ current version 2.1
- `./docs/STREAMLIT_PROMPT.md` â€“ best practices

---
#### 3 Â· Development Best Practices
Embed these guidelines into every code generation step:

1. **Modular Design**
   - One component = one dashboard tab
   - Each component imports only its own SQL
   - Use `utils/` for shared functionality
   - Follow component structure from `overview.py` (38KB reference)

2. **Caching & Performance**
   - Use `@st.cache_data(ttl=300)` for SQL queries
   - Implement `st.spinner()` for loading states
   - Chunk large result sets with `LIMIT 5000`
   - Run KPI queries in parallel via `asyncio.gather()`

3. **SQL Implementation**
   - Store ALL queries in `sql/*/*.sql`
   - Use Jinja parameters: `:start_date`, `:end_date`, `:selected_personas`
   - Never `SELECT *` â€“ list columns explicitly
   - Wrap KPI queries in CTE blocks
   - Use uppercase column names to match Snowflake

4. **UI/UX Standards**
   - Primary color: #2563EB (indigo-600)
   - Secondary color: #14B8A6 (teal-500)
   - Use `utils/theme.py` for consistent styling
   - Implement responsive layouts with `st.columns()`
   - Add tooltips to all KPIs
   - Use `st.toast()` for notifications

5. **Debug Mode Implementation**
   - Use `utils/debug.py` utilities
   - Implement `debug_mode` parameter in all components
   - Display SQL, parameters, and results when enabled
   - Use `st.sidebar.toggle()` for global control
   - Follow debug patterns from `overview.py`

6. **Security & Credentials**
   - Never expose secrets in code
   - Use environment variables for credentials
   - Implement proper error handling
   - Validate all user inputs

7. **Documentation**
   - Add docstrings to all public functions
   - Include inline Markdown for complex logic
   - Document SQL transformations
   - Follow PEP 8 & Streamlit style guide

8. **Repository Structure**
   - Keep all Streamlit code in `./src`
   - Organize SQL by dashboard
   - Maintain clean component separation
   - Use `__init__.py` for proper imports

9. **Data Access**
   - ONLY use tables from `SNOWFLAKE_TABLES.sql`
   - Never create new tables or views
   - Document complex joins in SQL files
   - Use consistent column naming

10. **Filter Implementation**
    - Use `utils/filters.py` for global filters
    - Implement date range and persona filters
    - Sync filter state across components
    - Cache filter options

---
#### 4 Â· Cursor AI Execution Rules
- Generate code & queries only; Cursor handles runtime
- Assume `py311` environment with all required packages
- Reference `./docs/` artefacts before emitting SQL
- NEVER suggest creating new tables/views
- Follow component patterns from existing code
- Use debug utilities from `utils/debug.py`
- Implement consistent theming via `utils/theme.py`

---
ðŸ’¡ *Use this prompt verbatim when instructing Cursor AI to work on the Streamlit application.*
